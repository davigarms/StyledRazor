@using StyledRazor.Core.Services
@using StyledRazor.Core
@using StyledRazor.Core.Utils
@using StyledRazor.Lib.Styles
@inherits StyledBase
@implements IDisposable

<div @ref="ElementRef">
  <Layout Styled="@Base"
          style=@($@"
              --height: {CalculatedHeight};
              --width: {CalculatedWidth};
              --flex-grow: {FlexGrow};
              --gutter: {Gutter};
              ")>
    @ChildContent
  </Layout>
</div>

@code {
  protected override Styled Base => UL(@"
		{
      list-style: none;
			display: flex;
      flex-wrap: wrap;
      padding: 0;
      margin: calc(-1 * var(--gutter)) 0 0 calc(-1 * var(--gutter));
      width: calc(100% + var(--gutter));
      position: relative;
		}

    > * {
      width: calc(var(--width) - 1 * var(--gutter)) !important;
      margin: var(--gutter) 0 0 var(--gutter) !important;
      height: var(--height) !important;
      max-height: var(--height);
      overflow: hidden;
      flex-grow: var(--flex-grow);
    }
	");

  private ElementReference ElementRef { get; set; }
  
  private MediaQuery MediaQuery { get; set; }

  private string CalculatedHeight { get; set; }
  
  private string CalculatedWidth => string.IsNullOrEmpty(MinWidth) ? $"{100 / Columns}%" : $"{MinWidth}";

  private string FlexGrow => string.IsNullOrEmpty(MinWidth) ? "0" : "1"; 
  
  private bool HasHeight => !string.IsNullOrEmpty(Height);
  
  private bool HasRatio => Ratio != 0;
  
  protected override Task OnInitializedAsync() => InitComponent();

  private async Task InitComponent()
  {
    MediaQuery = new MediaQuery(ResponsiveColumns);
    BrowserService.OnResize += WindowSizeHasChanged;
    await Task.Delay(10);
    await WindowSizeHasChanged();
  }

  private async Task WindowSizeHasChanged()
  {
    await SetNumberOfColumns();
    await SetCalculatedHeight();
    StateHasChanged();
  }
  
  private async Task SetNumberOfColumns()
  {
    var windowDimension = await Service.WindowDimension();
    Columns = MediaQuery.NumberOfColumnsFor(windowDimension.Width) ?? Columns;
  }

  private async Task SetCalculatedHeight()
  {
    var elementDimension = await Service.DimensionFrom(ElementRef);
    
    CalculatedHeight = HasHeight ? Height :
      HasRatio ? HeightFrom(elementDimension.Width) :
        "initial";
  }

  private string HeightFrom(int elementWidth) => $"{((double)elementWidth / Columns - Utils.RemToInt(Gutter)) / Ratio}px";

  public void Dispose() => BrowserService.OnResize -= WindowSizeHasChanged;

  [Inject]
  protected BrowserService Service { get; set; }

  [Parameter]
  public string Gutter { get; set; } = Tokens.SpacingS;

  [Parameter]
  public string Height { get; set; }

  [Parameter]
  public string MinWidth { get; set; }

  [Parameter]
  public BreakPoints ResponsiveColumns { get; set; }

  [Parameter]
  public int Columns { get; set; } = 1;

  [Parameter]
  public double Ratio { get; set; }
}