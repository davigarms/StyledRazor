@using StyledRazor.Core.Services
@using StyledRazor.Core
@using StyledRazor.Core.Model.Browser
@inherits StyledBase
@implements IDisposable

<div @ref="_elementRef">
  <Layout Styled="@Base"
          style=@($@"
              --height: {CalculatedHeight};
              --width: {CalculatedWidth};
              --gutter: {Gutter}
              ")>
    @ChildContent
  </Layout>
</div>

@code {
  private string CalculatedHeight { get; set; }

  private string CalculatedWidth => string.IsNullOrEmpty(MinWidth) ? $"{100 / Cols}%" : $"{MinWidth}";

  private ElementReference _elementRef;
  
  private bool HasHeight => !string.IsNullOrEmpty(Height);

  private bool HasRatio => Ratio != 0;
  
  private string HeightFrom(int elementWidth) => $"{((double)elementWidth / Cols - Utils.RemToInt(Gutter)) / Ratio}px";


  protected override Styled Base => UL(@"
		{
      list-style: none;
			display: flex;
      flex-wrap: wrap;
      padding: 0;
      margin: calc(-1 * var(--gutter)) 0 0 calc(-1 * var(--gutter));
      width: calc(100% + var(--gutter));
      position: relative;
		}

    > * {
      width: calc(var(--width) - 1 * var(--gutter)) !important;
      margin: var(--gutter) 0 0 var(--gutter) !important;
      height: var(--height) !important;
      max-height: var(--height);
      overflow: hidden;
      flex-grow: 1;
    }
	");
  
  protected override Task OnInitializedAsync() => InitComponent();

  private async Task InitComponent()
  {
    BrowserService.OnResize += WindowSizeHasChanged;
    await Task.Delay(1);
    await WindowSizeHasChanged();
  }

  private async Task WindowSizeHasChanged()
  {
    await SetCalculatedHeight();
    StateHasChanged();
  }

  private async Task SetCalculatedHeight()
  {
    var elementDimension = await Service.DimensionFrom(_elementRef);
    
    CalculatedHeight = HasHeight ? Height :
      HasRatio ? HeightFrom(elementDimension.Width) :
        "initial";
  }

  
  public void Dispose() => BrowserService.OnResize -= WindowSizeHasChanged;

  [Inject]
  protected BrowserService Service { get; set; }

  [Parameter]
  public string Gutter { get; set; } = Tokens.SpacingS;

  [Parameter]
  public string Height { get; set; }

  [Parameter]
  public string MinWidth { get; set; }

  [Parameter]
  public int Cols { get; set; } = 1;

  [Parameter]
  public double Ratio { get; set; }
}