@page "/"

<Stack Gutter="@Tokens.SpacingXs">
  <Box>First</Box>

  <Container Fluid>
    <Grid BaseWidth="200px">
      <Button>Default</Button>
      <Button Base="@ActiveButton" @onclick="@Click">
        Click me
      </Button>
    </Grid>
  </Container>

  <Box Horizontal="@Tokens.SpacingM" Height="@Tokens.SpacingXl">
    <Cluster Space="@Tokens.SpacingXl" NoPadding Stretch>
      <Box>Cluster</Box>
      <Box Start>Start</Box>
      <Box End>End</Box>
    </Cluster>
  </Box>

  <Container Fluid>
    <Stack Gutter="@Tokens.Zero">

      <Container Fluid>
        <GridList Gutter="@Tokens.SpacingS" Columns="Columns.Set(sm: 1, md: 2, lg: 4)" Ratio="1">
          @for (var i = 1; i < 5; i++)
          {
            var content = "Item " + i;
            <GridItem>
              <Background Color="lightgrey">
                <Cover Space="@Tokens.SpacingS">
                  <Container Centered>
                    @content
                  </Container>
                  <Cluster>
                    Cluster
                  </Cluster>
                </Cover>
              </Background>
            </GridItem>
          }
        </GridList>
      </Container>

      <Container Fluid>
        <Grid Gutter="@Tokens.SpacingS" BaseWidth="@Tokens.SpacingXxl" Height="10rem">
          @for (var i = 5; i < 8; i++)
          {
            var content = "Item " + i;
            var item = i;
            <GridItem Double="@(item == 6)" Full="@(item == 7)">
              <Background Color="lightgrey">
                <Cover>
                  <Container Centered>
                    @content
                  </Container>
                  <Cluster>
                    Cluster
                  </Cluster>
                </Cover>
              </Background>
            </GridItem>
          }
        </Grid>
      </Container>

    </Stack>
  </Container>
</Stack>

@code
{
  [Inject] protected ColumnsService Columns { get; set; }
  
  [Inject] protected ITokens Tokens { get; set; }
  
  [Inject] protected StyledProvider StyledProvider { get; set; }

  private StyledBase ActiveButton { get; set; }

  protected override void OnInitialized() => ActiveButton = StyledProvider.CreateInstance<GreyButton>();

  private void Click() => ActiveButton = ActiveButton is GreyButton
                                           ? StyledProvider.CreateInstance<AlertButton>()
                                           : StyledProvider.CreateInstance<GreyButton>();

}